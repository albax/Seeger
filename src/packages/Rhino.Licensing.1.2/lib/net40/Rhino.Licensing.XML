<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhino.Licensing</name>
    </assembly>
    <members>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator">
            <summary>
            Base license validator.
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.Log">
            <summary>
            License validator logger
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.TimeServers">
            <summary>
            Standard Time servers
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String)">
            <summary>
            Creates a license validator with specfied public key.
            </summary>
            <param name="publicKey">public key</param>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Creates a license validator using the client information
            and a service endpoint address to validate the license.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryOverwritingWithNewLicense(System.String)">
            <summary>
            Loads the license file.
            </summary>
            <param name="newLicense"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.RemoveExistingLicense">
            <summary>
            Removes existing license from the machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryLoadingLicenseValuesFromValidatedXml">
            <summary>
            Loads license data from validated license file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.DisableFutureChecks">
            <summary>
            Disables further license checks for the session.
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseInvalidated">
            <summary>
            Fired when license data is invalidated
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate">
            <summary>
            Gets the expiration date of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsageBehavior">
            <summary>
            How to behave when using the same license multiple times
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.SubscriptionEndpoint">
            <summary>
            Gets or Sets the endpoint address of the subscription service
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseType">
            <summary>
            Gets the Type of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.UserId">
            <summary>
            Gets the Id of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.Name">
            <summary>
            Gets the name of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.DisableFloatingLicenses">
            <summary>
            Gets or Sets Floating license support
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseAttributes">
            <summary>
            Gets extra license information
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.MultipleLicensesWereDiscovered">
            <summary>
            Event that's raised when duplicate licenses are found
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LeaseTimeout">
            <summary>
            Lease timeout
            </summary>
        </member>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage">
            <summary>
            Options for detecting multiple licenses
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.Deny">
            <summary>
            Deny if multiple licenses are used
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.AllowForSameUser">
            <summary>
            Only allow if it is running for the same user
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryClient">
            <summary>
             Publish the precense of a client over the network
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryClient.#ctor(System.Guid,System.Guid,System.String,System.String)">
            <summary>
             Create a new instance
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryClient.PublishMyPresence">
            <summary>
             Publish the presence of this node
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryHost">
            <summary>
             Listen to precense notifications
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryHost.Start">
            <summary>
             Starts listening to network notifications
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryHost.Dispose">
            <summary>
            Disposes of the object
            </summary>
        </member>
        <member name="E:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscovered">
            <summary>
             Notify when a client is discovered
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs">
            <summary>
            Notification raised when a client is discovered
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.UserId">
            <summary>
            The client's license id
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.MachineName">
            <summary>
            The client machine name
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.UserName">
            <summary>
            The client user name
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.SenderId">
            <summary>
            The id of the sender
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseExpiredException">
            <summary>
             Thrown when license is found but is past it's expiration date
            </summary>
        </member>
        <member name="T:Rhino.Licensing.RhinoLicensingException">
            <summary>
            Base class for all licensing exceptions.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.InvalidationType">
            <summary>
            InvalidationType
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.CannotGetNewLicense">
            <summary>
            Can not create a new license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.TimeExpired">
            <summary>
            License is expired
            </summary>
        </member>
        <member name="T:Rhino.Licensing.StringLicenseValidator">
            <summary>
            Validates content of a license file
            </summary>
        </member>
        <member name="M:Rhino.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.StringLicenseValidator"/>
            </summary>
            <param name="publicKey">public key</param>
            <param name="license">license content</param>
        </member>
        <member name="P:Rhino.Licensing.StringLicenseValidator.License">
            <summary>
            License content
            </summary>
        </member>
        <member name="T:Rhino.Licensing.FloatingLicenseNotAvailableException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.ILicensingService">
            <summary>
            Service contract of the licensing server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ILicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Issues a float license for the user.
            </summary>
            <param name="machine">machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.ISubscriptionLicensingService">
            <summary>
            Service contract of subscription server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ISubscriptionLicensingService.LeaseLicense(System.String)">
            <summary>
            Issues a leased license
            </summary>
            <param name="previousLicense"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.LicenseFileNotFoundException">
            <summary>
            Thrown when a valid license file can not be
            found on the client machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseGenerator">
            <summary>
            LicenseGenerator generates and signs license.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseGenerator"/>. 
            </summary>
            <param name="privateKey">private key of the product</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.GenerateFloatingLicense(System.String,System.String)">
            <summary>
            Generates a new floating license.
            </summary>
            <param name="name">Name of the license holder</param>
            <param name="publicKey">public key of the license server</param>
            <returns>license content</returns>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,Rhino.Licensing.LicenseType)">
            <summary>
            Generates a new license
            </summary>
            <param name="name">name of the license holder</param>
            <param name="id">Id of the license holder</param>
            <param name="expirationDate">expiry date</param>
            <param name="licenseType">type of the license</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.String},Rhino.Licensing.LicenseType)">
            <summary>
            Generates a new license
            </summary>
            <param name="name">name of the license holder</param>
            <param name="id">Id of the license holder</param>
            <param name="expirationDate">expiry date</param>
            <param name="licenseType">type of the license</param>
            <param name="attributes">extra information stored as key/valye in the license file</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.LicenseType">
            <summary>
            License Type
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.None">
            <summary>
            No type specified
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Trial">
            <summary>
            For trial use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Standard">
            <summary>
            Standard license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Personal">
            <summary>
            For personal use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Floating">
            <summary>
            Floating license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Subscription">
            <summary>
            Subscription based license
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseValidator">
            <summary>
            License validator validates a license file
            that can be located on disk.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
            <param name="licenseServerUrl">license server endpoint address</param>
            <param name="clientId">Id of the license holder</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.RemoveExistingLicense">
            <summary>
            Removes existing license from the machine.
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseNotFoundException">
            <summary>
            Thrown when suitable license is not found.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">steaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicensingService">
            <summary>
            Licensing server implementation.
            Because we use this service behavior, we don't have to worry 
            about multi threading issues. it is not something that we 
            expect to have to deal with huge load, anyway.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicensingService.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicensingService"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Leases a new license to the client machine.
            </summary>
            <param name="machine">client machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Licensing.LicensingService.SoftwarePublicKey">
            <summary>
            Gets or Sets the public key of the product
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicensingService.LicenseServerPrivateKey">
            <summary>
            Gets or Sets the private key of the license server
            </summary>
        </member>
        <member name="T:Rhino.Licensing.SntpClient">
            <summary>
            An SNTP helper client
            </summary>
        </member>
        <member name="M:Rhino.Licensing.SntpClient.#ctor(System.String[])">
            <summary>
            Creates a new instance of SNTP client
            </summary>
            <param name="hosts"></param>
        </member>
        <member name="M:Rhino.Licensing.SntpClient.BeginGetDate(System.Action{System.DateTime},System.Action)">
            <summary>
            Starts to get the date asynchronously
            </summary>
        </member>
        <member name="T:Rhino.Licensing.SntpClient.State">
            <summary>
            Manages the state of the asynchronous method call
            </summary>
        </member>
        <member name="M:Rhino.Licensing.SntpClient.State.#ctor(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,System.Action{System.DateTime},System.Action)">
            <summary>
            Creates a new instance of the state holder object
            </summary>
        </member>
        <member name="P:Rhino.Licensing.SntpClient.State.Socket">
            <summary>
            Socket instance that the call is made on
            </summary>
        </member>
        <member name="P:Rhino.Licensing.SntpClient.State.GetTime">
            <summary>
            Action to perform when getting the time
            </summary>
        </member>
        <member name="P:Rhino.Licensing.SntpClient.State.Failure">
            <summary>
            Action to perform upon failure
            </summary>
        </member>
        <member name="P:Rhino.Licensing.SntpClient.State.EndPoint">
            <summary>
            Endpoint instance
            </summary>
        </member>
    </members>
</doc>
